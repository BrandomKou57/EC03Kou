package com.example.demo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.jdbc.core.JdbcTemplate;
import java.util.List;
import java.util.Map;
import java.lang.String;
import java.lang.Object;



@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private InstrumentosRepository Repository;

  @Autowired
  private JdbcTemplate jdbcTemplate;

   @GetMapping(path="/") // 
  public @ResponseBody String home () { return "feanaya - Ernesto Anaya Ruiz";
  }

   @GetMapping(path="/codigo") // 
  public @ResponseBody String codigo () { return "feanaya ";
  }

   @GetMapping(path="/nombre-completo") // 
  public @ResponseBody String nombre () { return " Ernesto Anaya Ruiz";
  }

  @PostMapping(path="/api/instrumentos/nuevo") // Map ONLY POST Requests http://localhost:8080/demo/add
  public @ResponseBody String nuevo (@RequestParam String nombre) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Instrumentos n = new Instrumentos();
    n.setNombre(nombre);
    Repository.save(n);
    return "Instrumento Guardado";
  }

  @GetMapping(path="/api/instrumentos/listar")     // http://localhost:8080/demo/all
  public @ResponseBody Iterable<Instrumentos> getAllUsers() {
    // This returns a JSON or XML with the users
    return Repository.findAll();
  }



  @DeleteMapping(path="/api/instrumentos/eliminar")
  public @ResponseBody String eliminar  (@RequestParam Integer id) {
    Instrumentos n = new Instrumentos();
    n.setId(id);
    Repository.delete(n);
    return "Instrumento eliminado Eliminado";
  }






}